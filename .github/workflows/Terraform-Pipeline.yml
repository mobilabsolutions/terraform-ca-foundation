name: Terraform Pipeline
run-name: "${{ inputs.Action }}-${{ inputs.Environment }}-${{ github.run_number }}"

on:
  workflow_dispatch:
    inputs:
      Action:
        description: 'Terraform Action'
        required: true
        default: 'Create'
        type: choice
        options: 
          - create
          - destroy
      Environment:
        description: 'Environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      Location:
        description: 'Azure Region'
        required: true
        default: 'germanywestcentral'
        type: choice
        options:
          - germanywestcentral
          - westeurope

jobs:
  tf_plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment: ${{ inputs.Environment }}
    env:
      ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Replace tokens in .tfvars and .tf
        uses: qetza/replacetokens-action@v1
        id: replace-tokens
        with:
          root: "${{ github.workspace }}/${{ inputs.Location }}/${{ inputs.Environment }}"
          
          sources: |
            *.tfvars
            providers.tf
          missing-var-action: none
          missing-var-log: warn
          log-level: 'debug'
          variables: >
            [
              ${{ toJSON(vars) }},
              ${{ toJSON(secrets) }}
            ]

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Terraform Init
        working-directory: "${{ github.workspace }}/${{ inputs.Location }}/${{ inputs.Environment }}"
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ vars.TFSTATE_RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ vars.TFSTATE_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ vars.TFSTATE_CONTAINER_NAME }}" \
            -backend-config="key=github-${{ inputs.Environment }}-terraform.tfstate" \
            -var="client_id=${{ vars.ARM_CLIENT_ID }}" \
            -var="client_secret=${{ secrets.ARM_CLIENT_SECRET }}" \
            -var="tenant_id=${{ vars.ARM_TENANT_ID }}" 

      - name: Terraform Validate
        working-directory: "${{ github.workspace }}/${{ inputs.Location }}/${{ inputs.Environment }}"
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: "${{ github.workspace }}/${{ inputs.Location }}/${{ inputs.Environment }}"
        run: |    
          if [[ "${{ inputs.Action }}" == "destroy" ]]; then
            terraform plan -destroy -out terraform.tfplan\
            -var="client_id=${{ vars.ARM_CLIENT_ID }}" \
            -var="client_secret=${{ secrets.ARM_CLIENT_SECRET }}" \
            -var="tenant_id=${{ vars.ARM_TENANT_ID }}" 
          else
            terraform plan -out terraform.tfplan\
            -var="client_id=${{ vars.ARM_CLIENT_ID }}" \
            -var="client_secret=${{ secrets.ARM_CLIENT_SECRET }}" \
            -var="tenant_id=${{ vars.ARM_TENANT_ID }}" 
          fi
  
      - name: Upload tfplan as artifact
        uses: actions/upload-artifact@v4
        with:
          name: Terraform_Plan_${{ inputs.Action }}_${{ inputs.Environment }}-${{ github.sha }}
          path: ${{ github.workspace }}/${{ inputs.Location }}/${{ inputs.Environment }}/terraform.tfplan

  tf_apply:
    name: Terraform Apply
    needs: tf_plan
    runs-on: ubuntu-latest
    environment: ${{ inputs.Environment }}
    env:
      ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Replace tokens in .tfvars and .tf
        uses: qetza/replacetokens-action@v1
        id: replace-tokens
        with:
          root: "${{ github.workspace }}/${{ inputs.Location }}/${{ inputs.Environment }}"
          
          sources: |
            *.tfvars
            providers.tf
          missing-var-action: none
          missing-var-log: warn
          log-level: 'debug'
          variables: >
            [
              ${{ toJSON(vars) }},
              ${{ toJSON(secrets) }}
            ]

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Terraform Init
        working-directory: "${{ github.workspace }}/${{ inputs.Location }}/${{ inputs.Environment }}"
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ vars.TFSTATE_RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ vars.TFSTATE_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ vars.TFSTATE_CONTAINER_NAME }}" \
            -backend-config="key=github-${{ inputs.Environment }}-terraform.tfstate" \
            -var="client_id=${{ vars.ARM_CLIENT_ID }}" \
            -var="client_secret=${{ secrets.ARM_CLIENT_SECRET }}" \
            -var="tenant_id=${{ vars.ARM_TENANT_ID }}"
      
      - name: Download Terraform plan artifact
        uses: actions/download-artifact@v4
        with:
          name: Terraform_Plan_${{ inputs.Action }}_${{ inputs.Environment }}-${{ github.sha }}
          path: ${{ github.workspace }}/${{ inputs.Location }}/${{ inputs.Environment }}/
            
      - name: Terraform Apply
        working-directory: "${{ github.workspace }}/${{ inputs.Location }}/${{ inputs.Environment }}"
        run: |    
          terraform apply -auto-approve terraform.tfplan
  